#!/usr/bin/env node

var fs = require('fs'),
	path = require('path'),
	child_process = require('child_process'),
	async = require('async'),
	_ = require('lodash-node'),
	glob = require('glob');

function help() {
	var usage = '$0 link [--verbose] [--noop]\n\twill clone missing projects and run `npm link` as required\n'
		+ '$0 exec [--verbose] [--noop] [--] <command>\n\twill run <command> in each of the selected projects\n'
		+ '\n'
		+ 'To work on a single project, run from the directory containing package.json. If no package.json is found in the current directory, all projects matching */package.json will be affected.\n'

	console.log(usage.replace(/\$0/g, 'tumor'));
	process.exit(1);
}

var argv = process.argv.slice(2),
	mode = argv[0],
	noop = false,
	verbose = function () {};

if (argv.length == 0) help();

var i, consumed = 1;
for (i = 1; i < argv.length; i++) {
	var arg = argv[i];
	if (arg === '--help' || arg === '-h') {
		help();
	} else if (arg === '--verbose') {
		consumed++;
		verbose = function () {
			console.log.apply(console, arguments);
		};
	} else if (arg === '--noop') {
		consumed++;
		noop = true;
	} else if (arg === '--') {
		consumed++;
		break;
	}
}

argv = argv.slice(consumed);

if (mode == 'link') {
	if (argv.length !== 0) help();
} else if (mode == 'exec') {
	if (argv.length === 0) help();
} else {
	help();
}

var args, dir;
if (fs.existsSync('package.json')) {
	args = [ './package.json' ];
	dir = '../';
} else {
	args = glob.sync('*/package.json');
	dir = './';
}
dir = path.join(process.cwd(), dir);


function plural(count, word) {
	return count + ' ' + (count != 1 ? word + 's' : word);
}

function exec(cmd, args, cwd, cb) {
	if (cb == null) {
		cb = cwd;
		cwd = undefined;
	}
	if (noop) {
		console.log('(skipped) ' + cmd + ' ' + args.join(' ') + (cwd == null ? '' : ' [cwd=' + cwd + ']'));
		return cb();
	}
	var proc = child_process.spawn(cmd, args, {
		cwd: cwd,
		stdio: ['ignore', process.stdout, process.stderr]
	});
	proc.on('close', function (code) {
		var e = null;
		if (code !== 0) {
			e = new Error(cmd + ' returned ' + code);
		}
		cb(e);
	});
}

var projects = {};
var matchers = {};

function expectedPath(url) {
	return path.join(dir, path.basename(url).replace(/\.git$/, ""));
}

function normalizeGitUrl(url) {
	return url.replace(/(git\+ssh:\/\/)?([^#]*)(#.*)?$/, '$2');
}

function shouldLink(url) {
	return _.any(matchers, function (matcher) {
		return matcher.test(url);
	});
}

function readJson(file, cb) {
	fs.readFile(file, function (err, data) {
		if (err) return cb(err);
		try {
			cb(null, JSON.parse(data));
		} catch (e) {
			return cb(e);
		}
	});
}

function matchersFromFile(file, cb) {
	var dir = path.dirname(file);
	child_process.exec('git config --get remote.origin.url', { cwd: dir }, function (err, stdout, stderr) {
		if (err) {
			verbose('>>> couldn\'t read git remote in ' + dir + ', continuing');
			return cb();
		}

		var pattern = path.dirname(stdout.trim());
		matchers[pattern] = new RegExp(pattern);
		cb();
	});
}

function projectFromFile(file, cb) {
	readJson(file, function (err, json) {
		if (err) return cb(err);

		var project = projects[json.name] = {
			name: json.name,
			path: path.dirname(path.resolve(file)),
			exists: true,
			deps: []
		};
		_.each(json.dependencies, function (version, name) {
			if (shouldLink(version)) {
				project.deps.push(name);
				if (!projects[name]) {
					var url = normalizeGitUrl(version);
					projects[name] = {
						name: name,
						url: url,
						path: expectedPath(url)
					};
				}
			}
		});
		cb(null, project);
	});
}

function cloneIfMissing(project, cb) {
	if (project.exists) {
		cb();
	} else if (!fs.existsSync(project.path)) {
		if (noop) {
			project.exists = true;
		}
		exec('git', ['clone', project.url, project.path], cb);
	} else {
		projectFromFile(path.join(project.path, 'package.json'), cb);
	}
}

function dontCloneIfMissing(project, cb) {
	if (project.exists) {
		cb();
	} else if (!fs.existsSync(project.path)) {
		project.missing = true;
		cb();
	} else {
		projectFromFile(path.join(project.path, 'package.json'), cb);
	}
}

function linkDependencies(project, cb) {
	console.log('>>> linking modules for ' + project.name);

	async.eachSeries(project.deps, function (dep, cb) {
		var dependent = projects[dep];
		var relative = path.relative(project.path, dependent.path);
		var module = path.join(project.path, 'node_modules', dependent.name);
		if (fs.existsSync(module) && fs.lstatSync(module).isSymbolicLink()) {
			return cb();
		}
		dependent.installed = true;
		exec('npm', ['link', relative], project.path, cb);
	}, cb);
}

function installProject(project, cb) {
	if (project.installed) {
		console.log('>>> npm install for ' + project.name + ' skipped because it was the target of a npm link');
		cb();
	} else {
		console.log('>>> npm install for ' + project.name);
		project.installed = true;
		exec('npm', ['install'], project.path, cb);
	}
}

function execCommand(project, cb) {
	if (project.exists) {
		console.log('>>> exec for ' + project.name);
		exec(argv[0], argv.slice(1), project.path, cb);
	} else {
		cb();
	}
}

var steps = [
	function (cb) {
		console.log('>>> starting with ' + plural(args.length, 'project') + ' in ' + dir);

		async.each(args, matchersFromFile, cb);
	},
	function (cb) {
		verbose('>>> looking for dependencies matching', _.values(matchers));

		async.each(args, projectFromFile, cb);
	}
];

var linkProjectSteps = [
	function (cb) {
		async.until(function () {
			return _.all(projects, 'exists');
		}, function (cb) {
			async.eachSeries(_.values(projects), cloneIfMissing, cb);
		}, cb);
	},
	function (cb) {
		async.eachSeries(_.values(projects), linkDependencies, cb);
	},
	function (cb) {
		async.eachSeries(_.values(projects), installProject, cb);
	}
];

var execProjectSteps = [
	function (cb) {
		async.until(function () {
			return _.all(projects, function (project) {
				return project.exists || project.missing;
			});
		}, function (cb) {
			async.eachSeries(_.values(projects), dontCloneIfMissing, cb);
		}, cb);
	},
	function (cb) {
		async.eachSeries(_.values(projects), execCommand, cb);
	}
];

if (mode === 'link') {
	steps = steps.concat(linkProjectSteps);
} else if (mode === 'exec') {
	steps = steps.concat(execProjectSteps);
}

async.waterfall(steps, function (err) {
	if (err) throw err;

	console.log('>>> ended with ' + plural(_.size(projects), 'project') + ' in ' + dir);
});
